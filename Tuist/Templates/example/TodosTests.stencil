import ComposableArchitecture
import Todo
import Todos
import XCTest

@testable import Todos

class TodosTests: XCTestCase {
    let scheduler = DispatchQueue.testScheduler

    func testAddTodo() {
        let store = TestStore(
            initialState: TodosState(),
            reducer: todosReducer,
            environment: TodosEnvironment(
                mainQueue: self.scheduler.eraseToAnyScheduler(),
                uuid: UUID.incrementing
            ))

        store.assert(.send(.addTodoButtonTapped) {
            $0.todos.insert(
                Todo(id: UUID(uuidString: "00000000-0000-0000-0000-000000000000")!,
                     description: "",
                     isComplete: false
                ),at: 0)
        })
    }

    func testEditTodo() {
        let state = TodosState(
            todos: [
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000000")!,
                    description: "",
                    isComplete: false
                )
            ])

        let store = TestStore(
            initialState: state,
            reducer: todosReducer,
            environment: TodosEnvironment(
                mainQueue: self.scheduler.eraseToAnyScheduler(),
                uuid: UUID.incrementing))

        store.assert(.send(.todo(id: state.todos[0].id, action: .textFieldChanged("Learn Composable Architecture"))) {
            $0.todos[0].description = "Learn Composable Architecture"
        })
    }

    func testCompleteTodo() {
        let state = TodosState(
            todos: [
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000000")!,
                    description: "",
                    isComplete: false
                ),
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000001")!,
                    description: "",
                    isComplete: false
                )
            ])

        let store = TestStore(
            initialState: state,
            reducer: todosReducer,
            environment: TodosEnvironment(
                mainQueue: self.scheduler.eraseToAnyScheduler(),
                uuid: UUID.incrementing))

        store.assert(.send(.todo(id: state.todos[0].id, action: .checkBoxToggled)) {
            $0.todos[0].isComplete = true
        },
        .do { self.scheduler.advance(by: 1) },
        .receive(.sortCompletedTodos) {
            $0.todos = [
                $0.todos[1],
                $0.todos[0],
            ]
        })
    }

    func testCompleteTodoDebounces() {
        let state = TodosState(
            todos: [
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000000")!,
                    description: "",
                    isComplete: false
                ),
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000001")!,
                    description: "",
                    isComplete: false
                )
            ])

        let store = TestStore(
            initialState: state,
            reducer: todosReducer,
            environment: TodosEnvironment(
                mainQueue: self.scheduler.eraseToAnyScheduler(),
                uuid: UUID.incrementing))

        store.assert(.send(.todo(id: state.todos[0].id, action: .checkBoxToggled)) {
            $0.todos[0].isComplete = true
        },
        .do { self.scheduler.advance(by: 0.5) },
        .send(.todo(id: state.todos[0].id, action: .checkBoxToggled)) {
            $0.todos[0].isComplete = false
        },
        .do { self.scheduler.advance(by: 1) },
        .receive(.sortCompletedTodos))
    }

    func testClearCompleted() {
        let state = TodosState(
            todos: [
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000000")!,
                    description: "",
                    isComplete: false
                ),
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000001")!,
                    description: "",
                    isComplete: true
                )
            ])

        let store = TestStore(
            initialState: state,
            reducer: todosReducer,
            environment: TodosEnvironment(
                mainQueue: self.scheduler.eraseToAnyScheduler(),
                uuid: UUID.incrementing))

        store.assert(
            .send(.clearCompletedButtonTapped) {
                $0.todos = [
                    $0.todos[0]
                ]
            })
    }

    func testDelete() {
        let state = TodosState(
            todos: [
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000000")!,
                    description: "",
                    isComplete: false
                ),
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000001")!,
                    description: "",
                    isComplete: false
                ),
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000002")!,
                    description: "",
                    isComplete: false
                )
            ])

        let store = TestStore(
            initialState: state,
            reducer: todosReducer,
            environment: TodosEnvironment(
                mainQueue: self.scheduler.eraseToAnyScheduler(),
                uuid: UUID.incrementing))

      store.assert(
        .send(.delete([1])) {
            $0.todos = [
                $0.todos[0],
                $0.todos[2],
            ]
        }
      )
    }

    func testEditModeMoving() {
        let state = TodosState(
            todos: [
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000000")!,
                    description: "",
                    isComplete: false
                ),
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000001")!,
                    description: "",
                    isComplete: false
                ),
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000002")!,
                    description: "",
                    isComplete: false
                )
            ])

        let store = TestStore(
            initialState: state,
            reducer: todosReducer,
            environment: TodosEnvironment(
                mainQueue: self.scheduler.eraseToAnyScheduler(),
                uuid: UUID.incrementing))

        store.assert(
            .send(.editModeChanged(.active)) {
                $0.editMode = .active
            },
            .send(.move([0], 2)) {
                $0.todos = [
                    $0.todos[1],
                    $0.todos[0],
                    $0.todos[2],
                ]
            },
            .do { self.scheduler.advance(by: .milliseconds(100)) },
            .receive(.sortCompletedTodos))
    }

    func testFilteredEdit() {
        let state = TodosState(
            todos: [
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000000")!,
                    description: "",
                    isComplete: false
                ),
                Todo(
                    id: UUID(uuidString: "00000000-0000-0000-0000-000000000001")!,
                    description: "",
                    isComplete: false
                )
            ])

        let store = TestStore(
            initialState: state,
            reducer: todosReducer,
            environment: TodosEnvironment(
                mainQueue: self.scheduler.eraseToAnyScheduler(),
                uuid: UUID.incrementing))

      store.assert(
        .send(.filterPicked(.completed)) {
            $0.filter = .completed
        },
        .send(.todo(id: state.todos[1].id, action: .textFieldChanged("Did this already"))) {
            $0.todos[1].description = "Did this already"
        })
    }
}

extension UUID {
    static var incrementing: () -> UUID {
        var uuid = 0
        return {
            defer { uuid += 1 }
            return UUID(uuidString: "00000000-0000-0000-0000-\(String(format: "%012x", uuid))")!
        }
    }
}
