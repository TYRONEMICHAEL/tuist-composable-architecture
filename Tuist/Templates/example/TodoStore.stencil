import Foundation
import ComposableArchitecture

public struct Todo: Equatable, Identifiable {
    public let id: UUID
    public var isComplete = false
    public var description = ""

    public init(id: UUID) {
        self.id = id
        self.description = ""
        self.isComplete = false
    }

    public init(id: UUID, description: String, isComplete: Bool) {
        self.id = id
        self.description = description
        self.isComplete = isComplete
    }
}

public enum TodoAction: Equatable {
    case checkBoxToggled
    case textFieldChanged(String)
}

public struct TodoEnvironment {
    public init() {}
}

public let todoReducer = Reducer<Todo, TodoAction, TodoEnvironment> { todo, action, _ in
    switch action {
    case .checkBoxToggled:
        todo.isComplete.toggle()
        return .none
    case let .textFieldChanged(description):
        todo.description = description
        return .none
  }
}
